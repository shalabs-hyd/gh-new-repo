 Kube-apiserver is responsible for **`authenticating`**, **`validating`** requests, **`retrieving`** and **`Updating`** data in ETCD 
 key-value store. In fact kube-apiserver is the only component that interacts directly to the etcd datastore. The other components such 
 as kube-scheduler, kube-controller-manager and kubelet uses the API-Server to update in the cluster in their respective areas.

 Installing kube-apiserver

 If you are bootstrapping kube-apiserver using kubeadm tool, then you don't need to know this, but if you are setting up using the hardway
then kube-apiserver is available as a binary in the kubernetes release page.

For example: You can downlaod the kube-apiserver v1.13.0 binary here kube-apiserver

$ wget https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kube-apiserver


View kube-apiserver - Kubeadm

$ kubectl get pods -n kube-system


cloud_user@k8s-master:~$ kubectl get pods -A -o wide | head -n1; kubectl get pods -A -o wide | grep api
NAMESPACE     NAME                                           READY   STATUS    RESTARTS      AGE   IP               NODE                    NOMINATED NODE   READINESS GATES
kube-system   kube-apiserver-k8s-master.shalab.io            1/1     Running   2 (97m ago)   14h   172.31.103.219   k8s-master.shalab.io    <none>           <none>

View kube-apiserver options - Kubeadm

You can see the options with in the pod definition file located at /etc/kubernetes/manifests/kube-apiserver.yaml

cloud_user@k8s-master:~$ sudo cat /etc/kubernetes/manifests/kube-apiserver.yaml
[sudo] password for cloud_user:
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 172.31.103.219:6443
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=172.31.103.219
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/etc/kubernetes/pki/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
    - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
    - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
    - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
    - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-issuer=https://kubernetes.default.svc.cluster.local
    - --service-account-key-file=/etc/kubernetes/pki/sa.pub
    - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
    - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key



    View kube-apiserver options - Manual

    In a Non-kubeadm setup, you can inspect the options by viewing the kube-apiserver.service

$ cat /etc/systemd/system/kube-apiserver.service